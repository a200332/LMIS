#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CITI.EVO.UserManagement.DAL.Context
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Lmis_UserManagement")]
	public partial class UserManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUM_AttributeCategory(UM_AttributeCategory instance);
    partial void UpdateUM_AttributeCategory(UM_AttributeCategory instance);
    partial void DeleteUM_AttributeCategory(UM_AttributeCategory instance);
    partial void InsertUM_User(UM_User instance);
    partial void UpdateUM_User(UM_User instance);
    partial void DeleteUM_User(UM_User instance);
    partial void InsertUM_AttributesSchemaNode(UM_AttributesSchemaNode instance);
    partial void UpdateUM_AttributesSchemaNode(UM_AttributesSchemaNode instance);
    partial void DeleteUM_AttributesSchemaNode(UM_AttributesSchemaNode instance);
    partial void InsertUM_AttributesSchema(UM_AttributesSchema instance);
    partial void UpdateUM_AttributesSchema(UM_AttributesSchema instance);
    partial void DeleteUM_AttributesSchema(UM_AttributesSchema instance);
    partial void InsertUM_AttributeType(UM_AttributeType instance);
    partial void UpdateUM_AttributeType(UM_AttributeType instance);
    partial void DeleteUM_AttributeType(UM_AttributeType instance);
    partial void InsertUM_GroupAttribute(UM_GroupAttribute instance);
    partial void UpdateUM_GroupAttribute(UM_GroupAttribute instance);
    partial void DeleteUM_GroupAttribute(UM_GroupAttribute instance);
    partial void InsertUM_GroupOrganization(UM_GroupOrganization instance);
    partial void UpdateUM_GroupOrganization(UM_GroupOrganization instance);
    partial void DeleteUM_GroupOrganization(UM_GroupOrganization instance);
    partial void InsertUM_Group(UM_Group instance);
    partial void UpdateUM_Group(UM_Group instance);
    partial void DeleteUM_Group(UM_Group instance);
    partial void InsertUM_GroupUser(UM_GroupUser instance);
    partial void UpdateUM_GroupUser(UM_GroupUser instance);
    partial void DeleteUM_GroupUser(UM_GroupUser instance);
    partial void InsertUM_LoginToken(UM_LoginToken instance);
    partial void UpdateUM_LoginToken(UM_LoginToken instance);
    partial void DeleteUM_LoginToken(UM_LoginToken instance);
    partial void InsertUM_Message(UM_Message instance);
    partial void UpdateUM_Message(UM_Message instance);
    partial void DeleteUM_Message(UM_Message instance);
    partial void InsertUM_MessageViewer(UM_MessageViewer instance);
    partial void UpdateUM_MessageViewer(UM_MessageViewer instance);
    partial void DeleteUM_MessageViewer(UM_MessageViewer instance);
    partial void InsertUM_PermissionParameter(UM_PermissionParameter instance);
    partial void UpdateUM_PermissionParameter(UM_PermissionParameter instance);
    partial void DeleteUM_PermissionParameter(UM_PermissionParameter instance);
    partial void InsertUM_Permission(UM_Permission instance);
    partial void UpdateUM_Permission(UM_Permission instance);
    partial void DeleteUM_Permission(UM_Permission instance);
    partial void InsertUM_Project(UM_Project instance);
    partial void UpdateUM_Project(UM_Project instance);
    partial void DeleteUM_Project(UM_Project instance);
    partial void InsertUM_Resource(UM_Resource instance);
    partial void UpdateUM_Resource(UM_Resource instance);
    partial void DeleteUM_Resource(UM_Resource instance);
    partial void InsertUM_RuleAttribute(UM_RuleAttribute instance);
    partial void UpdateUM_RuleAttribute(UM_RuleAttribute instance);
    partial void DeleteUM_RuleAttribute(UM_RuleAttribute instance);
    partial void InsertUM_Rule(UM_Rule instance);
    partial void UpdateUM_Rule(UM_Rule instance);
    partial void DeleteUM_Rule(UM_Rule instance);
    partial void InsertUM_UserAttribute(UM_UserAttribute instance);
    partial void UpdateUM_UserAttribute(UM_UserAttribute instance);
    partial void DeleteUM_UserAttribute(UM_UserAttribute instance);
    partial void InsertUM_UserCategory(UM_UserCategory instance);
    partial void UpdateUM_UserCategory(UM_UserCategory instance);
    partial void DeleteUM_UserCategory(UM_UserCategory instance);
    partial void InsertUM_UserLog(UM_UserLog instance);
    partial void UpdateUM_UserLog(UM_UserLog instance);
    partial void DeleteUM_UserLog(UM_UserLog instance);
    #endregion
		
		public UserManagementDataContext() : 
				base(global::CITI.EVO.UserManagement.DAL.Properties.Settings.Default.Lmis_UserManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UM_AttributeCategory> UM_AttributeCategories
		{
			get
			{
				return this.GetTable<UM_AttributeCategory>();
			}
		}
		
		public System.Data.Linq.Table<UM_User> UM_Users
		{
			get
			{
				return this.GetTable<UM_User>();
			}
		}
		
		public System.Data.Linq.Table<UM_AttributesSchemaNode> UM_AttributesSchemaNodes
		{
			get
			{
				return this.GetTable<UM_AttributesSchemaNode>();
			}
		}
		
		public System.Data.Linq.Table<UM_AttributesSchema> UM_AttributesSchemas
		{
			get
			{
				return this.GetTable<UM_AttributesSchema>();
			}
		}
		
		public System.Data.Linq.Table<UM_AttributeType> UM_AttributeTypes
		{
			get
			{
				return this.GetTable<UM_AttributeType>();
			}
		}
		
		public System.Data.Linq.Table<UM_GroupAttribute> UM_GroupAttributes
		{
			get
			{
				return this.GetTable<UM_GroupAttribute>();
			}
		}
		
		public System.Data.Linq.Table<UM_GroupOrganization> UM_GroupOrganizations
		{
			get
			{
				return this.GetTable<UM_GroupOrganization>();
			}
		}
		
		public System.Data.Linq.Table<UM_Group> UM_Groups
		{
			get
			{
				return this.GetTable<UM_Group>();
			}
		}
		
		public System.Data.Linq.Table<UM_GroupUser> UM_GroupUsers
		{
			get
			{
				return this.GetTable<UM_GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<UM_LoginToken> UM_LoginTokens
		{
			get
			{
				return this.GetTable<UM_LoginToken>();
			}
		}
		
		public System.Data.Linq.Table<UM_Message> UM_Messages
		{
			get
			{
				return this.GetTable<UM_Message>();
			}
		}
		
		public System.Data.Linq.Table<UM_MessageViewer> UM_MessageViewers
		{
			get
			{
				return this.GetTable<UM_MessageViewer>();
			}
		}
		
		public System.Data.Linq.Table<UM_PermissionParameter> UM_PermissionParameters
		{
			get
			{
				return this.GetTable<UM_PermissionParameter>();
			}
		}
		
		public System.Data.Linq.Table<UM_Permission> UM_Permissions
		{
			get
			{
				return this.GetTable<UM_Permission>();
			}
		}
		
		public System.Data.Linq.Table<UM_Project> UM_Projects
		{
			get
			{
				return this.GetTable<UM_Project>();
			}
		}
		
		public System.Data.Linq.Table<UM_Resource> UM_Resources
		{
			get
			{
				return this.GetTable<UM_Resource>();
			}
		}
		
		public System.Data.Linq.Table<UM_RuleAttribute> UM_RuleAttributes
		{
			get
			{
				return this.GetTable<UM_RuleAttribute>();
			}
		}
		
		public System.Data.Linq.Table<UM_Rule> UM_Rules
		{
			get
			{
				return this.GetTable<UM_Rule>();
			}
		}
		
		public System.Data.Linq.Table<UM_UserAttribute> UM_UserAttributes
		{
			get
			{
				return this.GetTable<UM_UserAttribute>();
			}
		}
		
		public System.Data.Linq.Table<UM_UserCategory> UM_UserCategories
		{
			get
			{
				return this.GetTable<UM_UserCategory>();
			}
		}
		
		public System.Data.Linq.Table<UM_UserLog> UM_UserLogs
		{
			get
			{
				return this.GetTable<UM_UserLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_AttributeCategories")]
	public partial class UM_AttributeCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_AttributesSchemaNode> _UM_AttributesSchemaNodes;
		
		private EntityRef<UM_Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_AttributeCategory()
		{
			this._UM_AttributesSchemaNodes = new EntitySet<UM_AttributesSchemaNode>(new Action<UM_AttributesSchemaNode>(this.attach_UM_AttributesSchemaNodes), new Action<UM_AttributesSchemaNode>(this.detach_UM_AttributesSchemaNodes));
			this._Project = default(EntityRef<UM_Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributeCategory_UM_AttributesSchemaNode", Storage="_UM_AttributesSchemaNodes", ThisKey="ID", OtherKey="AttributeCategoryID")]
		public EntitySet<UM_AttributesSchemaNode> AttributesSchemaNodes
		{
			get
			{
				return this._UM_AttributesSchemaNodes;
			}
			set
			{
				this._UM_AttributesSchemaNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributeCategory", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.AttributeCategories.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.AttributeCategories.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributeCategory = this;
		}
		
		private void detach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributeCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Users")]
	public partial class UM_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _LoginName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Address;
		
		private bool _IsSuperAdmin;
		
		private bool _IsActive;
		
		private System.Nullable<System.Guid> _UserCategoryID;
		
		private System.Nullable<System.DateTime> _PasswordExpirationDate;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_GroupUser> _UM_GroupUsers;
		
		private EntitySet<UM_LoginToken> _LoginTokens;
		
		private EntitySet<UM_MessageViewer> _MessageViewers;
		
		private EntitySet<UM_UserAttribute> _UM_UserAttributes;
		
		private EntitySet<UM_UserLog> _UserLogs;
		
		private EntityRef<UM_UserCategory> _UserCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLoginNameChanging(string value);
    partial void OnLoginNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIsSuperAdminChanging(bool value);
    partial void OnIsSuperAdminChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnUserCategoryIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserCategoryIDChanged();
    partial void OnPasswordExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPasswordExpirationDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_User()
		{
			this._UM_GroupUsers = new EntitySet<UM_GroupUser>(new Action<UM_GroupUser>(this.attach_UM_GroupUsers), new Action<UM_GroupUser>(this.detach_UM_GroupUsers));
			this._LoginTokens = new EntitySet<UM_LoginToken>(new Action<UM_LoginToken>(this.attach_LoginTokens), new Action<UM_LoginToken>(this.detach_LoginTokens));
			this._MessageViewers = new EntitySet<UM_MessageViewer>(new Action<UM_MessageViewer>(this.attach_MessageViewers), new Action<UM_MessageViewer>(this.detach_MessageViewers));
			this._UM_UserAttributes = new EntitySet<UM_UserAttribute>(new Action<UM_UserAttribute>(this.attach_UM_UserAttributes), new Action<UM_UserAttribute>(this.detach_UM_UserAttributes));
			this._UserLogs = new EntitySet<UM_UserLog>(new Action<UM_UserLog>(this.attach_UserLogs), new Action<UM_UserLog>(this.detach_UserLogs));
			this._UserCategory = default(EntityRef<UM_UserCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginName", DbType="NVarChar(250)")]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this.OnLoginNameChanging(value);
					this.SendPropertyChanging();
					this._LoginName = value;
					this.SendPropertyChanged("LoginName");
					this.OnLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(250)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(250)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSuperAdmin", DbType="Bit NOT NULL")]
		public bool IsSuperAdmin
		{
			get
			{
				return this._IsSuperAdmin;
			}
			set
			{
				if ((this._IsSuperAdmin != value))
				{
					this.OnIsSuperAdminChanging(value);
					this.SendPropertyChanging();
					this._IsSuperAdmin = value;
					this.SendPropertyChanged("IsSuperAdmin");
					this.OnIsSuperAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCategoryID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserCategoryID
		{
			get
			{
				return this._UserCategoryID;
			}
			set
			{
				if ((this._UserCategoryID != value))
				{
					if (this._UserCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._UserCategoryID = value;
					this.SendPropertyChanged("UserCategoryID");
					this.OnUserCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordExpirationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PasswordExpirationDate
		{
			get
			{
				return this._PasswordExpirationDate;
			}
			set
			{
				if ((this._PasswordExpirationDate != value))
				{
					this.OnPasswordExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._PasswordExpirationDate = value;
					this.SendPropertyChanged("PasswordExpirationDate");
					this.OnPasswordExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_GroupUser", Storage="_UM_GroupUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UM_GroupUser> GroupUsers
		{
			get
			{
				return this._UM_GroupUsers;
			}
			set
			{
				this._UM_GroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_LoginToken", Storage="_LoginTokens", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UM_LoginToken> LoginTokens
		{
			get
			{
				return this._LoginTokens;
			}
			set
			{
				this._LoginTokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_MessageViewer", Storage="_MessageViewers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UM_MessageViewer> MessageViewers
		{
			get
			{
				return this._MessageViewers;
			}
			set
			{
				this._MessageViewers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_UserAttribute", Storage="_UM_UserAttributes", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UM_UserAttribute> UserAttributes
		{
			get
			{
				return this._UM_UserAttributes;
			}
			set
			{
				this._UM_UserAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_UserLog", Storage="_UserLogs", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UM_UserLog> UserLogs
		{
			get
			{
				return this._UserLogs;
			}
			set
			{
				this._UserLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_UserCategory_UM_User", Storage="_UserCategory", ThisKey="UserCategoryID", OtherKey="ID", IsForeignKey=true)]
		public UM_UserCategory UserCategory
		{
			get
			{
				return this._UserCategory.Entity;
			}
			set
			{
				UM_UserCategory previousValue = this._UserCategory.Entity;
				if (((previousValue != value) 
							|| (this._UserCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserCategory.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserCategory.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserCategoryID = value.ID;
					}
					else
					{
						this._UserCategoryID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UserCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_GroupUsers(UM_GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UM_GroupUsers(UM_GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LoginTokens(UM_LoginToken entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LoginTokens(UM_LoginToken entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MessageViewers(UM_MessageViewer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MessageViewers(UM_MessageViewer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UM_UserAttributes(UM_UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UM_UserAttributes(UM_UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLogs(UM_UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLogs(UM_UserLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_AttributesSchemaNodes")]
	public partial class UM_AttributesSchemaNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _AttributeCategoryID;
		
		private System.Guid _AttributeTypeID;
		
		private System.Guid _AttributesSchemaID;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_GroupAttribute> _UM_GroupAttributes;
		
		private EntitySet<UM_RuleAttribute> _UM_RuleAttributes;
		
		private EntitySet<UM_UserAttribute> _UserAttributes;
		
		private EntityRef<UM_AttributeCategory> _AttributeCategory;
		
		private EntityRef<UM_AttributesSchema> _AttributesSchema;
		
		private EntityRef<UM_AttributeType> _AttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAttributeCategoryIDChanging(System.Guid value);
    partial void OnAttributeCategoryIDChanged();
    partial void OnAttributeTypeIDChanging(System.Guid value);
    partial void OnAttributeTypeIDChanged();
    partial void OnAttributesSchemaIDChanging(System.Guid value);
    partial void OnAttributesSchemaIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_AttributesSchemaNode()
		{
			this._UM_GroupAttributes = new EntitySet<UM_GroupAttribute>(new Action<UM_GroupAttribute>(this.attach_UM_GroupAttributes), new Action<UM_GroupAttribute>(this.detach_UM_GroupAttributes));
			this._UM_RuleAttributes = new EntitySet<UM_RuleAttribute>(new Action<UM_RuleAttribute>(this.attach_UM_RuleAttributes), new Action<UM_RuleAttribute>(this.detach_UM_RuleAttributes));
			this._UserAttributes = new EntitySet<UM_UserAttribute>(new Action<UM_UserAttribute>(this.attach_UserAttributes), new Action<UM_UserAttribute>(this.detach_UserAttributes));
			this._AttributeCategory = default(EntityRef<UM_AttributeCategory>);
			this._AttributesSchema = default(EntityRef<UM_AttributesSchema>);
			this._AttributeType = default(EntityRef<UM_AttributeType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeCategoryID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeCategoryID
		{
			get
			{
				return this._AttributeCategoryID;
			}
			set
			{
				if ((this._AttributeCategoryID != value))
				{
					if (this._AttributeCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeCategoryID = value;
					this.SendPropertyChanged("AttributeCategoryID");
					this.OnAttributeCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeTypeID
		{
			get
			{
				return this._AttributeTypeID;
			}
			set
			{
				if ((this._AttributeTypeID != value))
				{
					if (this._AttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeID = value;
					this.SendPropertyChanged("AttributeTypeID");
					this.OnAttributeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributesSchemaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributesSchemaID
		{
			get
			{
				return this._AttributesSchemaID;
			}
			set
			{
				if ((this._AttributesSchemaID != value))
				{
					if (this._AttributesSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributesSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._AttributesSchemaID = value;
					this.SendPropertyChanged("AttributesSchemaID");
					this.OnAttributesSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_GroupAttribute", Storage="_UM_GroupAttributes", ThisKey="ID", OtherKey="AttributesSchemaNodeID")]
		public EntitySet<UM_GroupAttribute> GroupAttributes
		{
			get
			{
				return this._UM_GroupAttributes;
			}
			set
			{
				this._UM_GroupAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_RuleAttribute", Storage="_UM_RuleAttributes", ThisKey="ID", OtherKey="AttributesSchemaNodeID")]
		public EntitySet<UM_RuleAttribute> RuleAttributes
		{
			get
			{
				return this._UM_RuleAttributes;
			}
			set
			{
				this._UM_RuleAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_UserAttribute", Storage="_UserAttributes", ThisKey="ID", OtherKey="AttributesSchemaNodeID")]
		public EntitySet<UM_UserAttribute> UserAttributes
		{
			get
			{
				return this._UserAttributes;
			}
			set
			{
				this._UserAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributeCategory_UM_AttributesSchemaNode", Storage="_AttributeCategory", ThisKey="AttributeCategoryID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributeCategory AttributeCategory
		{
			get
			{
				return this._AttributeCategory.Entity;
			}
			set
			{
				UM_AttributeCategory previousValue = this._AttributeCategory.Entity;
				if (((previousValue != value) 
							|| (this._AttributeCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeCategory.Entity = null;
						previousValue.AttributesSchemaNodes.Remove(this);
					}
					this._AttributeCategory.Entity = value;
					if ((value != null))
					{
						value.AttributesSchemaNodes.Add(this);
						this._AttributeCategoryID = value.ID;
					}
					else
					{
						this._AttributeCategoryID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributeCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchema_UM_AttributesSchemaNode", Storage="_AttributesSchema", ThisKey="AttributesSchemaID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributesSchema AttributesSchema
		{
			get
			{
				return this._AttributesSchema.Entity;
			}
			set
			{
				UM_AttributesSchema previousValue = this._AttributesSchema.Entity;
				if (((previousValue != value) 
							|| (this._AttributesSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributesSchema.Entity = null;
						previousValue.AttributesSchemaNodes.Remove(this);
					}
					this._AttributesSchema.Entity = value;
					if ((value != null))
					{
						value.AttributesSchemaNodes.Add(this);
						this._AttributesSchemaID = value.ID;
					}
					else
					{
						this._AttributesSchemaID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributesSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributeType_UM_AttributesSchemaNode", Storage="_AttributeType", ThisKey="AttributeTypeID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributeType AttributeType
		{
			get
			{
				return this._AttributeType.Entity;
			}
			set
			{
				UM_AttributeType previousValue = this._AttributeType.Entity;
				if (((previousValue != value) 
							|| (this._AttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeType.Entity = null;
						previousValue.UM_AttributesSchemaNodes.Remove(this);
					}
					this._AttributeType.Entity = value;
					if ((value != null))
					{
						value.UM_AttributesSchemaNodes.Add(this);
						this._AttributeTypeID = value.ID;
					}
					else
					{
						this._AttributeTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_GroupAttributes(UM_GroupAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = this;
		}
		
		private void detach_UM_GroupAttributes(UM_GroupAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = null;
		}
		
		private void attach_UM_RuleAttributes(UM_RuleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = this;
		}
		
		private void detach_UM_RuleAttributes(UM_RuleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = null;
		}
		
		private void attach_UserAttributes(UM_UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = this;
		}
		
		private void detach_UserAttributes(UM_UserAttribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchemaNode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_AttributesSchemas")]
	public partial class UM_AttributesSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_AttributesSchemaNode> _UM_AttributesSchemaNodes;
		
		private EntityRef<UM_Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_AttributesSchema()
		{
			this._UM_AttributesSchemaNodes = new EntitySet<UM_AttributesSchemaNode>(new Action<UM_AttributesSchemaNode>(this.attach_UM_AttributesSchemaNodes), new Action<UM_AttributesSchemaNode>(this.detach_UM_AttributesSchemaNodes));
			this._Project = default(EntityRef<UM_Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchema_UM_AttributesSchemaNode", Storage="_UM_AttributesSchemaNodes", ThisKey="ID", OtherKey="AttributesSchemaID")]
		public EntitySet<UM_AttributesSchemaNode> AttributesSchemaNodes
		{
			get
			{
				return this._UM_AttributesSchemaNodes;
			}
			set
			{
				this._UM_AttributesSchemaNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributesSchema", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.AttributesSchemas.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.AttributesSchemas.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchema = this;
		}
		
		private void detach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributesSchema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_AttributeTypes")]
	public partial class UM_AttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_AttributesSchemaNode> _UM_AttributesSchemaNodes;
		
		private EntityRef<UM_Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_AttributeType()
		{
			this._UM_AttributesSchemaNodes = new EntitySet<UM_AttributesSchemaNode>(new Action<UM_AttributesSchemaNode>(this.attach_UM_AttributesSchemaNodes), new Action<UM_AttributesSchemaNode>(this.detach_UM_AttributesSchemaNodes));
			this._Project = default(EntityRef<UM_Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributeType_UM_AttributesSchemaNode", Storage="_UM_AttributesSchemaNodes", ThisKey="ID", OtherKey="AttributeTypeID")]
		public EntitySet<UM_AttributesSchemaNode> UM_AttributesSchemaNodes
		{
			get
			{
				return this._UM_AttributesSchemaNodes;
			}
			set
			{
				this._UM_AttributesSchemaNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributeType", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.AttributeTypes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.AttributeTypes.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = this;
		}
		
		private void detach_UM_AttributesSchemaNodes(UM_AttributesSchemaNode entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_GroupAttributes")]
	public partial class UM_GroupAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _GroupID;
		
		private System.Guid _AttributesSchemaNodeID;
		
		private string _Value;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_AttributesSchemaNode> _AttributesSchemaNode;
		
		private EntityRef<UM_Group> _UM_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnAttributesSchemaNodeIDChanging(System.Guid value);
    partial void OnAttributesSchemaNodeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_GroupAttribute()
		{
			this._AttributesSchemaNode = default(EntityRef<UM_AttributesSchemaNode>);
			this._UM_Group = default(EntityRef<UM_Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributesSchemaNodeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributesSchemaNodeID
		{
			get
			{
				return this._AttributesSchemaNodeID;
			}
			set
			{
				if ((this._AttributesSchemaNodeID != value))
				{
					if (this._AttributesSchemaNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributesSchemaNodeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributesSchemaNodeID = value;
					this.SendPropertyChanged("AttributesSchemaNodeID");
					this.OnAttributesSchemaNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_GroupAttribute", Storage="_AttributesSchemaNode", ThisKey="AttributesSchemaNodeID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributesSchemaNode AttributesSchemaNode
		{
			get
			{
				return this._AttributesSchemaNode.Entity;
			}
			set
			{
				UM_AttributesSchemaNode previousValue = this._AttributesSchemaNode.Entity;
				if (((previousValue != value) 
							|| (this._AttributesSchemaNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributesSchemaNode.Entity = null;
						previousValue.GroupAttributes.Remove(this);
					}
					this._AttributesSchemaNode.Entity = value;
					if ((value != null))
					{
						value.GroupAttributes.Add(this);
						this._AttributesSchemaNodeID = value.ID;
					}
					else
					{
						this._AttributesSchemaNodeID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributesSchemaNode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupAttribute", Storage="_UM_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public UM_Group Group
		{
			get
			{
				return this._UM_Group.Entity;
			}
			set
			{
				UM_Group previousValue = this._UM_Group.Entity;
				if (((previousValue != value) 
							|| (this._UM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UM_Group.Entity = null;
						previousValue.GroupAttributes.Remove(this);
					}
					this._UM_Group.Entity = value;
					if ((value != null))
					{
						value.GroupAttributes.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_GroupOrganizations")]
	public partial class UM_GroupOrganization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _GroupID;
		
		private System.Nullable<System.Guid> _OrganizationID;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private EntityRef<UM_Group> _UM_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Nullable<System.Guid> value);
    partial void OnGroupIDChanged();
    partial void OnOrganizationIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    #endregion
		
		public UM_GroupOrganization()
		{
			this._UM_Group = default(EntityRef<UM_Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UM_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationID
		{
			get
			{
				return this._OrganizationID;
			}
			set
			{
				if ((this._OrganizationID != value))
				{
					this.OnOrganizationIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationID = value;
					this.SendPropertyChanged("OrganizationID");
					this.OnOrganizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupOrganization", Storage="_UM_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public UM_Group UM_Group
		{
			get
			{
				return this._UM_Group.Entity;
			}
			set
			{
				UM_Group previousValue = this._UM_Group.Entity;
				if (((previousValue != value) 
							|| (this._UM_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UM_Group.Entity = null;
						previousValue.UM_GroupOrganizations.Remove(this);
					}
					this._UM_Group.Entity = value;
					if ((value != null))
					{
						value.UM_GroupOrganizations.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UM_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Groups")]
	public partial class UM_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private System.Guid _ProjectID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_GroupAttribute> _UM_GroupAttributes;
		
		private EntitySet<UM_GroupOrganization> _UM_GroupOrganizations;
		
		private EntitySet<UM_Group> _Children;
		
		private EntitySet<UM_GroupUser> _UM_GroupUsers;
		
		private EntitySet<UM_Permission> _UM_Permissions;
		
		private EntityRef<UM_Group> _Parent;
		
		private EntityRef<UM_Project> _UM_Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Group()
		{
			this._UM_GroupAttributes = new EntitySet<UM_GroupAttribute>(new Action<UM_GroupAttribute>(this.attach_UM_GroupAttributes), new Action<UM_GroupAttribute>(this.detach_UM_GroupAttributes));
			this._UM_GroupOrganizations = new EntitySet<UM_GroupOrganization>(new Action<UM_GroupOrganization>(this.attach_UM_GroupOrganizations), new Action<UM_GroupOrganization>(this.detach_UM_GroupOrganizations));
			this._Children = new EntitySet<UM_Group>(new Action<UM_Group>(this.attach_Children), new Action<UM_Group>(this.detach_Children));
			this._UM_GroupUsers = new EntitySet<UM_GroupUser>(new Action<UM_GroupUser>(this.attach_UM_GroupUsers), new Action<UM_GroupUser>(this.detach_UM_GroupUsers));
			this._UM_Permissions = new EntitySet<UM_Permission>(new Action<UM_Permission>(this.attach_UM_Permissions), new Action<UM_Permission>(this.detach_UM_Permissions));
			this._Parent = default(EntityRef<UM_Group>);
			this._UM_Project = default(EntityRef<UM_Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._UM_Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupAttribute", Storage="_UM_GroupAttributes", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UM_GroupAttribute> GroupAttributes
		{
			get
			{
				return this._UM_GroupAttributes;
			}
			set
			{
				this._UM_GroupAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupOrganization", Storage="_UM_GroupOrganizations", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UM_GroupOrganization> UM_GroupOrganizations
		{
			get
			{
				return this._UM_GroupOrganizations;
			}
			set
			{
				this._UM_GroupOrganizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_Group", Storage="_Children", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<UM_Group> Children
		{
			get
			{
				return this._Children;
			}
			set
			{
				this._Children.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupUser", Storage="_UM_GroupUsers", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UM_GroupUser> GroupUsers
		{
			get
			{
				return this._UM_GroupUsers;
			}
			set
			{
				this._UM_GroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_Permission", Storage="_UM_Permissions", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UM_Permission> Permissions
		{
			get
			{
				return this._UM_Permissions;
			}
			set
			{
				this._UM_Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_Group", Storage="_Parent", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public UM_Group Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				UM_Group previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Group", Storage="_UM_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._UM_Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._UM_Project.Entity;
				if (((previousValue != value) 
							|| (this._UM_Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UM_Project.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._UM_Project.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_GroupAttributes(UM_GroupAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UM_GroupAttributes(UM_GroupAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UM_GroupOrganizations(UM_GroupOrganization entity)
		{
			this.SendPropertyChanging();
			entity.UM_Group = this;
		}
		
		private void detach_UM_GroupOrganizations(UM_GroupOrganization entity)
		{
			this.SendPropertyChanging();
			entity.UM_Group = null;
		}
		
		private void attach_Children(UM_Group entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Children(UM_Group entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_UM_GroupUsers(UM_GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UM_GroupUsers(UM_GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UM_Permissions(UM_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UM_Permissions(UM_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_GroupUsers")]
	public partial class UM_GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private System.Guid _GroupID;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_Group> _Group;
		
		private EntityRef<UM_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_GroupUser()
		{
			this._Group = default(EntityRef<UM_Group>);
			this._User = default(EntityRef<UM_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_GroupUser", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public UM_Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				UM_Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_GroupUser", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UM_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UM_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_LoginTokens")]
	public partial class UM_LoginToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _LoginToken;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<System.DateTime> _ExpireDate;
		
		private System.Nullable<System.DateTime> _LastAccessDate;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private System.Nullable<int> _DeleteReason;
		
		private long _Hashcode;
		
		private EntityRef<UM_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLoginTokenChanging(System.Guid value);
    partial void OnLoginTokenChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnExpireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireDateChanged();
    partial void OnLastAccessDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastAccessDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnDeleteReasonChanging(System.Nullable<int> value);
    partial void OnDeleteReasonChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_LoginToken()
		{
			this._User = default(EntityRef<UM_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginToken", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LoginToken
		{
			get
			{
				return this._LoginToken;
			}
			set
			{
				if ((this._LoginToken != value))
				{
					this.OnLoginTokenChanging(value);
					this.SendPropertyChanging();
					this._LoginToken = value;
					this.SendPropertyChanged("LoginToken");
					this.OnLoginTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireDate
		{
			get
			{
				return this._ExpireDate;
			}
			set
			{
				if ((this._ExpireDate != value))
				{
					this.OnExpireDateChanging(value);
					this.SendPropertyChanging();
					this._ExpireDate = value;
					this.SendPropertyChanged("ExpireDate");
					this.OnExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastAccessDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastAccessDate
		{
			get
			{
				return this._LastAccessDate;
			}
			set
			{
				if ((this._LastAccessDate != value))
				{
					this.OnLastAccessDateChanging(value);
					this.SendPropertyChanging();
					this._LastAccessDate = value;
					this.SendPropertyChanged("LastAccessDate");
					this.OnLastAccessDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeleteReason", DbType="Int")]
		public System.Nullable<int> DeleteReason
		{
			get
			{
				return this._DeleteReason;
			}
			set
			{
				if ((this._DeleteReason != value))
				{
					this.OnDeleteReasonChanging(value);
					this.SendPropertyChanging();
					this._DeleteReason = value;
					this.SendPropertyChanged("DeleteReason");
					this.OnDeleteReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_LoginToken", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UM_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UM_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LoginTokens.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LoginTokens.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Messages")]
	public partial class UM_Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Subject;
		
		private string _Text;
		
		private System.Guid _ObjectID;
		
		private int _Type;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_MessageViewer> _MessageViewers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnObjectIDChanging(System.Guid value);
    partial void OnObjectIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Message()
		{
			this._MessageViewers = new EntitySet<UM_MessageViewer>(new Action<UM_MessageViewer>(this.attach_MessageViewers), new Action<UM_MessageViewer>(this.detach_MessageViewers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Message_UM_MessageViewer", Storage="_MessageViewers", ThisKey="ID", OtherKey="MessageID")]
		public EntitySet<UM_MessageViewer> MessageViewers
		{
			get
			{
				return this._MessageViewers;
			}
			set
			{
				this._MessageViewers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageViewers(UM_MessageViewer entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessageViewers(UM_MessageViewer entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_MessageViewer")]
	public partial class UM_MessageViewer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _MessageID;
		
		private System.Guid _UserID;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_Message> _Message;
		
		private EntityRef<UM_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnMessageIDChanging(System.Guid value);
    partial void OnMessageIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_MessageViewer()
		{
			this._Message = default(EntityRef<UM_Message>);
			this._User = default(EntityRef<UM_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Message_UM_MessageViewer", Storage="_Message", ThisKey="MessageID", OtherKey="ID", IsForeignKey=true)]
		public UM_Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				UM_Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageViewers.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageViewers.Add(this);
						this._MessageID = value.ID;
					}
					else
					{
						this._MessageID = default(System.Guid);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_MessageViewer", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UM_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UM_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MessageViewers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MessageViewers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_PermissionParameters")]
	public partial class UM_PermissionParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _PermissionID;
		
		private string _Name;
		
		private string _Value;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_Permission> _Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnPermissionIDChanging(System.Guid value);
    partial void OnPermissionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_PermissionParameter()
		{
			this._Permission = default(EntityRef<UM_Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Permission_UM_PermissionParameter", Storage="_Permission", ThisKey="PermissionID", OtherKey="ID", IsForeignKey=true)]
		public UM_Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				UM_Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.PermissionParameters.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.PermissionParameters.Add(this);
						this._PermissionID = value.ID;
					}
					else
					{
						this._PermissionID = default(System.Guid);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Permissions")]
	public partial class UM_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _GroupID;
		
		private System.Guid _ResourceID;
		
		private System.Nullable<int> _RuleValue;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_PermissionParameter> _PermissionParameters;
		
		private EntityRef<UM_Group> _Group;
		
		private EntityRef<UM_Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnResourceIDChanging(System.Guid value);
    partial void OnResourceIDChanged();
    partial void OnRuleValueChanging(System.Nullable<int> value);
    partial void OnRuleValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Permission()
		{
			this._PermissionParameters = new EntitySet<UM_PermissionParameter>(new Action<UM_PermissionParameter>(this.attach_PermissionParameters), new Action<UM_PermissionParameter>(this.detach_PermissionParameters));
			this._Group = default(EntityRef<UM_Group>);
			this._Resource = default(EntityRef<UM_Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ResourceID
		{
			get
			{
				return this._ResourceID;
			}
			set
			{
				if ((this._ResourceID != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceID = value;
					this.SendPropertyChanged("ResourceID");
					this.OnResourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleValue", DbType="Int")]
		public System.Nullable<int> RuleValue
		{
			get
			{
				return this._RuleValue;
			}
			set
			{
				if ((this._RuleValue != value))
				{
					this.OnRuleValueChanging(value);
					this.SendPropertyChanging();
					this._RuleValue = value;
					this.SendPropertyChanged("RuleValue");
					this.OnRuleValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Permission_UM_PermissionParameter", Storage="_PermissionParameters", ThisKey="ID", OtherKey="PermissionID")]
		public EntitySet<UM_PermissionParameter> PermissionParameters
		{
			get
			{
				return this._PermissionParameters;
			}
			set
			{
				this._PermissionParameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Group_UM_Permission", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public UM_Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				UM_Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Resource_UM_Permission", Storage="_Resource", ThisKey="ResourceID", OtherKey="ID", IsForeignKey=true)]
		public UM_Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				UM_Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.UM_Permissions.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.UM_Permissions.Add(this);
						this._ResourceID = value.ID;
					}
					else
					{
						this._ResourceID = default(System.Guid);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PermissionParameters(UM_PermissionParameter entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_PermissionParameters(UM_PermissionParameter entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Projects")]
	public partial class UM_Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private bool _IsActive;
		
		private long _Hashcode;
		
		private EntitySet<UM_AttributeCategory> _UM_AttributeCategories;
		
		private EntitySet<UM_AttributesSchema> _UM_AttributesSchemas;
		
		private EntitySet<UM_AttributeType> _UM_AttributeTypes;
		
		private EntitySet<UM_Group> _UM_Groups;
		
		private EntitySet<UM_Resource> _UM_Resources;
		
		private EntitySet<UM_Rule> _UM_Rules;
		
		private EntitySet<UM_UserLog> _UM_UserLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Project()
		{
			this._UM_AttributeCategories = new EntitySet<UM_AttributeCategory>(new Action<UM_AttributeCategory>(this.attach_UM_AttributeCategories), new Action<UM_AttributeCategory>(this.detach_UM_AttributeCategories));
			this._UM_AttributesSchemas = new EntitySet<UM_AttributesSchema>(new Action<UM_AttributesSchema>(this.attach_UM_AttributesSchemas), new Action<UM_AttributesSchema>(this.detach_UM_AttributesSchemas));
			this._UM_AttributeTypes = new EntitySet<UM_AttributeType>(new Action<UM_AttributeType>(this.attach_UM_AttributeTypes), new Action<UM_AttributeType>(this.detach_UM_AttributeTypes));
			this._UM_Groups = new EntitySet<UM_Group>(new Action<UM_Group>(this.attach_UM_Groups), new Action<UM_Group>(this.detach_UM_Groups));
			this._UM_Resources = new EntitySet<UM_Resource>(new Action<UM_Resource>(this.attach_UM_Resources), new Action<UM_Resource>(this.detach_UM_Resources));
			this._UM_Rules = new EntitySet<UM_Rule>(new Action<UM_Rule>(this.attach_UM_Rules), new Action<UM_Rule>(this.detach_UM_Rules));
			this._UM_UserLogs = new EntitySet<UM_UserLog>(new Action<UM_UserLog>(this.attach_UM_UserLogs), new Action<UM_UserLog>(this.detach_UM_UserLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributeCategory", Storage="_UM_AttributeCategories", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_AttributeCategory> AttributeCategories
		{
			get
			{
				return this._UM_AttributeCategories;
			}
			set
			{
				this._UM_AttributeCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributesSchema", Storage="_UM_AttributesSchemas", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_AttributesSchema> AttributesSchemas
		{
			get
			{
				return this._UM_AttributesSchemas;
			}
			set
			{
				this._UM_AttributesSchemas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_AttributeType", Storage="_UM_AttributeTypes", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_AttributeType> AttributeTypes
		{
			get
			{
				return this._UM_AttributeTypes;
			}
			set
			{
				this._UM_AttributeTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Group", Storage="_UM_Groups", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_Group> Groups
		{
			get
			{
				return this._UM_Groups;
			}
			set
			{
				this._UM_Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Resource", Storage="_UM_Resources", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_Resource> Resources
		{
			get
			{
				return this._UM_Resources;
			}
			set
			{
				this._UM_Resources.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Rule", Storage="_UM_Rules", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_Rule> Rules
		{
			get
			{
				return this._UM_Rules;
			}
			set
			{
				this._UM_Rules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_UserLog", Storage="_UM_UserLogs", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UM_UserLog> UserLogs
		{
			get
			{
				return this._UM_UserLogs;
			}
			set
			{
				this._UM_UserLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_AttributeCategories(UM_AttributeCategory entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_AttributeCategories(UM_AttributeCategory entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_AttributesSchemas(UM_AttributesSchema entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_AttributesSchemas(UM_AttributesSchema entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_AttributeTypes(UM_AttributeType entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_AttributeTypes(UM_AttributeType entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_Groups(UM_Group entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_Groups(UM_Group entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_Resources(UM_Resource entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_Resources(UM_Resource entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_Rules(UM_Rule entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_Rules(UM_Rule entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UM_UserLogs(UM_UserLog entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UM_UserLogs(UM_UserLog entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Resources")]
	public partial class UM_Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _Name;
		
		private string _Description;
		
		private int _Type;
		
		private string _Value;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_Permission> _UM_Permissions;
		
		private EntitySet<UM_Resource> _Children;
		
		private EntityRef<UM_Project> _Project;
		
		private EntityRef<UM_Resource> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Resource()
		{
			this._UM_Permissions = new EntitySet<UM_Permission>(new Action<UM_Permission>(this.attach_UM_Permissions), new Action<UM_Permission>(this.detach_UM_Permissions));
			this._Children = new EntitySet<UM_Resource>(new Action<UM_Resource>(this.attach_Children), new Action<UM_Resource>(this.detach_Children));
			this._Project = default(EntityRef<UM_Project>);
			this._Parent = default(EntityRef<UM_Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Parent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(500)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Resource_UM_Permission", Storage="_UM_Permissions", ThisKey="ID", OtherKey="ResourceID")]
		public EntitySet<UM_Permission> UM_Permissions
		{
			get
			{
				return this._UM_Permissions;
			}
			set
			{
				this._UM_Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Resource_UM_Resource", Storage="_Children", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<UM_Resource> Children
		{
			get
			{
				return this._Children;
			}
			set
			{
				this._Children.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Resource", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Resource_UM_Resource", Storage="_Parent", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public UM_Resource Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				UM_Resource previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_Permissions(UM_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_UM_Permissions(UM_Permission entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_Children(UM_Resource entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Children(UM_Resource entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_RuleAttributes")]
	public partial class UM_RuleAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _RuleID;
		
		private System.Guid _AttributesSchemaNodeID;
		
		private string _Value;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_AttributesSchemaNode> _AttributesSchemaNode;
		
		private EntityRef<UM_Rule> _Rule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRuleIDChanging(System.Guid value);
    partial void OnRuleIDChanged();
    partial void OnAttributesSchemaNodeIDChanging(System.Guid value);
    partial void OnAttributesSchemaNodeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_RuleAttribute()
		{
			this._AttributesSchemaNode = default(EntityRef<UM_AttributesSchemaNode>);
			this._Rule = default(EntityRef<UM_Rule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributesSchemaNodeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributesSchemaNodeID
		{
			get
			{
				return this._AttributesSchemaNodeID;
			}
			set
			{
				if ((this._AttributesSchemaNodeID != value))
				{
					if (this._AttributesSchemaNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributesSchemaNodeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributesSchemaNodeID = value;
					this.SendPropertyChanged("AttributesSchemaNodeID");
					this.OnAttributesSchemaNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_RuleAttribute", Storage="_AttributesSchemaNode", ThisKey="AttributesSchemaNodeID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributesSchemaNode AttributesSchemaNode
		{
			get
			{
				return this._AttributesSchemaNode.Entity;
			}
			set
			{
				UM_AttributesSchemaNode previousValue = this._AttributesSchemaNode.Entity;
				if (((previousValue != value) 
							|| (this._AttributesSchemaNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributesSchemaNode.Entity = null;
						previousValue.RuleAttributes.Remove(this);
					}
					this._AttributesSchemaNode.Entity = value;
					if ((value != null))
					{
						value.RuleAttributes.Add(this);
						this._AttributesSchemaNodeID = value.ID;
					}
					else
					{
						this._AttributesSchemaNodeID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributesSchemaNode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Rule_UM_RuleAttribute", Storage="_Rule", ThisKey="RuleID", OtherKey="ID", IsForeignKey=true)]
		public UM_Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				UM_Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.RuleAttributes.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.RuleAttributes.Add(this);
						this._RuleID = value.ID;
					}
					else
					{
						this._RuleID = default(System.Guid);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_Rules")]
	public partial class UM_Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ProjectID;
		
		private string _Name;
		
		private bool _CanView;
		
		private bool _CanAdd;
		
		private bool _CanEdit;
		
		private bool _CanDelete;
		
		private System.Nullable<int> _AccessLevel;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_RuleAttribute> _UM_RuleAttributes;
		
		private EntityRef<UM_Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCanViewChanging(bool value);
    partial void OnCanViewChanged();
    partial void OnCanAddChanging(bool value);
    partial void OnCanAddChanged();
    partial void OnCanEditChanging(bool value);
    partial void OnCanEditChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_Rule()
		{
			this._UM_RuleAttributes = new EntitySet<UM_RuleAttribute>(new Action<UM_RuleAttribute>(this.attach_UM_RuleAttributes), new Action<UM_RuleAttribute>(this.detach_UM_RuleAttributes));
			this._Project = default(EntityRef<UM_Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanView", DbType="Bit NOT NULL")]
		public bool CanView
		{
			get
			{
				return this._CanView;
			}
			set
			{
				if ((this._CanView != value))
				{
					this.OnCanViewChanging(value);
					this.SendPropertyChanging();
					this._CanView = value;
					this.SendPropertyChanged("CanView");
					this.OnCanViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAdd", DbType="Bit NOT NULL")]
		public bool CanAdd
		{
			get
			{
				return this._CanAdd;
			}
			set
			{
				if ((this._CanAdd != value))
				{
					this.OnCanAddChanging(value);
					this.SendPropertyChanging();
					this._CanAdd = value;
					this.SendPropertyChanged("CanAdd");
					this.OnCanAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanEdit", DbType="Bit NOT NULL")]
		public bool CanEdit
		{
			get
			{
				return this._CanEdit;
			}
			set
			{
				if ((this._CanEdit != value))
				{
					this.OnCanEditChanging(value);
					this.SendPropertyChanging();
					this._CanEdit = value;
					this.SendPropertyChanged("CanEdit");
					this.OnCanEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Rule_UM_RuleAttribute", Storage="_UM_RuleAttributes", ThisKey="ID", OtherKey="RuleID")]
		public EntitySet<UM_RuleAttribute> RuleAttributes
		{
			get
			{
				return this._UM_RuleAttributes;
			}
			set
			{
				this._UM_RuleAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_Rule", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Rules.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Rules.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UM_RuleAttributes(UM_RuleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_UM_RuleAttributes(UM_RuleAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_UserAttributes")]
	public partial class UM_UserAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private System.Guid _AttributesSchemaNodeID;
		
		private string _Value;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_AttributesSchemaNode> _AttributesSchemaNode;
		
		private EntityRef<UM_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnAttributesSchemaNodeIDChanging(System.Guid value);
    partial void OnAttributesSchemaNodeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_UserAttribute()
		{
			this._AttributesSchemaNode = default(EntityRef<UM_AttributesSchemaNode>);
			this._User = default(EntityRef<UM_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributesSchemaNodeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributesSchemaNodeID
		{
			get
			{
				return this._AttributesSchemaNodeID;
			}
			set
			{
				if ((this._AttributesSchemaNodeID != value))
				{
					if (this._AttributesSchemaNode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributesSchemaNodeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributesSchemaNodeID = value;
					this.SendPropertyChanged("AttributesSchemaNodeID");
					this.OnAttributesSchemaNodeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_AttributesSchemaNode_UM_UserAttribute", Storage="_AttributesSchemaNode", ThisKey="AttributesSchemaNodeID", OtherKey="ID", IsForeignKey=true)]
		public UM_AttributesSchemaNode AttributesSchemaNode
		{
			get
			{
				return this._AttributesSchemaNode.Entity;
			}
			set
			{
				UM_AttributesSchemaNode previousValue = this._AttributesSchemaNode.Entity;
				if (((previousValue != value) 
							|| (this._AttributesSchemaNode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributesSchemaNode.Entity = null;
						previousValue.UserAttributes.Remove(this);
					}
					this._AttributesSchemaNode.Entity = value;
					if ((value != null))
					{
						value.UserAttributes.Add(this);
						this._AttributesSchemaNodeID = value.ID;
					}
					else
					{
						this._AttributesSchemaNodeID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributesSchemaNode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_UserAttribute", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UM_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UM_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserAttributes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserAttributes.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_UserCategories")]
	public partial class UM_UserCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntitySet<UM_User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_UserCategory()
		{
			this._Users = new EntitySet<UM_User>(new Action<UM_User>(this.attach_Users), new Action<UM_User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_UserCategory_UM_User", Storage="_Users", ThisKey="ID", OtherKey="UserCategoryID")]
		public EntitySet<UM_User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(UM_User entity)
		{
			this.SendPropertyChanging();
			entity.UserCategory = this;
		}
		
		private void detach_Users(UM_User entity)
		{
			this.SendPropertyChanging();
			entity.UserCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UM_UserLog")]
	public partial class UM_UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _IPaddress;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<System.DateTime> _DateChanged;
		
		private System.Nullable<System.DateTime> _DateDeleted;
		
		private long _Hashcode;
		
		private EntityRef<UM_Project> _UM_Project;
		
		private EntityRef<UM_User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnIPaddressChanging(string value);
    partial void OnIPaddressChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateChangedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangedChanged();
    partial void OnDateDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDeletedChanged();
    partial void OnHashcodeChanging(long value);
    partial void OnHashcodeChanged();
    #endregion
		
		public UM_UserLog()
		{
			this._UM_Project = default(EntityRef<UM_Project>);
			this._User = default(EntityRef<UM_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._UM_Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPaddress", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IPaddress
		{
			get
			{
				return this._IPaddress;
			}
			set
			{
				if ((this._IPaddress != value))
				{
					this.OnIPaddressChanging(value);
					this.SendPropertyChanging();
					this._IPaddress = value;
					this.SendPropertyChanged("IPaddress");
					this.OnIPaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChanged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChanged
		{
			get
			{
				return this._DateChanged;
			}
			set
			{
				if ((this._DateChanged != value))
				{
					this.OnDateChangedChanging(value);
					this.SendPropertyChanging();
					this._DateChanged = value;
					this.SendPropertyChanged("DateChanged");
					this.OnDateChangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateDeleted
		{
			get
			{
				return this._DateDeleted;
			}
			set
			{
				if ((this._DateDeleted != value))
				{
					this.OnDateDeletedChanging(value);
					this.SendPropertyChanging();
					this._DateDeleted = value;
					this.SendPropertyChanged("DateDeleted");
					this.OnDateDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hashcode", DbType="BigInt NOT NULL")]
		public long Hashcode
		{
			get
			{
				return this._Hashcode;
			}
			set
			{
				if ((this._Hashcode != value))
				{
					this.OnHashcodeChanging(value);
					this.SendPropertyChanging();
					this._Hashcode = value;
					this.SendPropertyChanged("Hashcode");
					this.OnHashcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_Project_UM_UserLog", Storage="_UM_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public UM_Project Project
		{
			get
			{
				return this._UM_Project.Entity;
			}
			set
			{
				UM_Project previousValue = this._UM_Project.Entity;
				if (((previousValue != value) 
							|| (this._UM_Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UM_Project.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._UM_Project.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UM_User_UM_UserLog", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public UM_User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				UM_User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLogs.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
